// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mark.proto

package pbproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Subject int32

const (
	Subject_PHYSICS   Subject = 0
	Subject_CHEMISTRY Subject = 1
	Subject_MATHS     Subject = 2
)

var Subject_name = map[int32]string{
	0: "PHYSICS",
	1: "CHEMISTRY",
	2: "MATHS",
}

var Subject_value = map[string]int32{
	"PHYSICS":   0,
	"CHEMISTRY": 1,
	"MATHS":     2,
}

func (x Subject) String() string {
	return proto.EnumName(Subject_name, int32(x))
}

func (Subject) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{0}
}

type MarkReq struct {
	SlNo                 int32    `protobuf:"varint,1,opt,name=sl_no,json=slNo,proto3" json:"sl_no,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subject              Subject  `protobuf:"varint,3,opt,name=subject,proto3,enum=pbproto.Subject" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkReq) Reset()         { *m = MarkReq{} }
func (m *MarkReq) String() string { return proto.CompactTextString(m) }
func (*MarkReq) ProtoMessage()    {}
func (*MarkReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{0}
}

func (m *MarkReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkReq.Unmarshal(m, b)
}
func (m *MarkReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkReq.Marshal(b, m, deterministic)
}
func (m *MarkReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkReq.Merge(m, src)
}
func (m *MarkReq) XXX_Size() int {
	return xxx_messageInfo_MarkReq.Size(m)
}
func (m *MarkReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkReq.DiscardUnknown(m)
}

var xxx_messageInfo_MarkReq proto.InternalMessageInfo

func (m *MarkReq) GetSlNo() int32 {
	if m != nil {
		return m.SlNo
	}
	return 0
}

func (m *MarkReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarkReq) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return Subject_PHYSICS
}

type MarkResp struct {
	SlNo                 int32    `protobuf:"varint,1,opt,name=sl_no,json=slNo,proto3" json:"sl_no,omitempty"`
	Name                 int32    `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	Subject              Subject  `protobuf:"varint,3,opt,name=subject,proto3,enum=pbproto.Subject" json:"subject,omitempty"`
	Mark                 int32    `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkResp) Reset()         { *m = MarkResp{} }
func (m *MarkResp) String() string { return proto.CompactTextString(m) }
func (*MarkResp) ProtoMessage()    {}
func (*MarkResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f00c7f10d4b8668, []int{1}
}

func (m *MarkResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkResp.Unmarshal(m, b)
}
func (m *MarkResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkResp.Marshal(b, m, deterministic)
}
func (m *MarkResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkResp.Merge(m, src)
}
func (m *MarkResp) XXX_Size() int {
	return xxx_messageInfo_MarkResp.Size(m)
}
func (m *MarkResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkResp.DiscardUnknown(m)
}

var xxx_messageInfo_MarkResp proto.InternalMessageInfo

func (m *MarkResp) GetSlNo() int32 {
	if m != nil {
		return m.SlNo
	}
	return 0
}

func (m *MarkResp) GetName() int32 {
	if m != nil {
		return m.Name
	}
	return 0
}

func (m *MarkResp) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return Subject_PHYSICS
}

func (m *MarkResp) GetMark() int32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func init() {
	proto.RegisterEnum("pbproto.Subject", Subject_name, Subject_value)
	proto.RegisterType((*MarkReq)(nil), "pbproto.MarkReq")
	proto.RegisterType((*MarkResp)(nil), "pbproto.MarkResp")
}

func init() {
	proto.RegisterFile("mark.proto", fileDescriptor_2f00c7f10d4b8668)
}

var fileDescriptor_2f00c7f10d4b8668 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0x2c, 0xca,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0x02, 0x33, 0x94, 0xe2, 0xb8, 0xd8,
	0x7d, 0x13, 0x8b, 0xb2, 0x83, 0x52, 0x0b, 0x85, 0x84, 0xb9, 0x58, 0x8b, 0x73, 0xe2, 0xf3, 0xf2,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x58, 0x8a, 0x73, 0xfc, 0xf2, 0x85, 0x84, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x2d, 0x2e,
	0xf6, 0xe2, 0xd2, 0xa4, 0xac, 0xd4, 0xe4, 0x12, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x01,
	0x3d, 0xa8, 0x71, 0x7a, 0xc1, 0x10, 0xf1, 0x20, 0x98, 0x02, 0xa5, 0x62, 0x2e, 0x0e, 0x88, 0xf9,
	0xc5, 0x05, 0x84, 0x2d, 0x60, 0x25, 0xdd, 0x02, 0x90, 0x7e, 0x90, 0xbf, 0x24, 0x58, 0x20, 0xfa,
	0x41, 0x6c, 0x2d, 0x03, 0x2e, 0x76, 0xa8, 0x3a, 0x21, 0x6e, 0x2e, 0xf6, 0x00, 0x8f, 0xc8, 0x60,
	0x4f, 0xe7, 0x60, 0x01, 0x06, 0x21, 0x5e, 0x2e, 0x4e, 0x67, 0x0f, 0x57, 0x5f, 0xcf, 0xe0, 0x90,
	0xa0, 0x48, 0x01, 0x46, 0x21, 0x4e, 0x2e, 0x56, 0x5f, 0xc7, 0x10, 0x8f, 0x60, 0x01, 0x26, 0x23,
	0x07, 0x2e, 0xbe, 0xe0, 0x92, 0xd2, 0x94, 0xd4, 0xbc, 0x92, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4,
	0x54, 0x21, 0x3d, 0x2e, 0x76, 0xf7, 0xd4, 0x12, 0x90, 0xdb, 0x85, 0x10, 0xb6, 0x43, 0x83, 0x4a,
	0x4a, 0x10, 0x4d, 0xa4, 0xb8, 0x20, 0x89, 0x0d, 0xcc, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0x4d, 0x22, 0xbc, 0x66, 0x01, 0x00, 0x00,
}
